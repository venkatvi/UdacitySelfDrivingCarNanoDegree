<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="3481px" height="1410px" version="1.1" content="&lt;mxfile userAgent=&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.2 Safari/605.1.15&quot; version=&quot;9.1.2&quot; editor=&quot;www.draw.io&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;2be09ec3-591b-e72a-45f5-7d212b4ae1de&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs><clipPath id="mx-clip-444-883-372-74-0"><rect x="444" y="883" width="372" height="74"/></clipPath><clipPath id="mx-clip-444-965-372-112-0"><rect x="444" y="965" width="372" height="112"/></clipPath><clipPath id="mx-clip-984-877-432-244-0"><rect x="984" y="877" width="432" height="244"/></clipPath><clipPath id="mx-clip-984-1129-432-282-0"><rect x="984" y="1129" width="432" height="282"/></clipPath><clipPath id="mx-clip-1006-31-302-104-0"><rect x="1006" y="31" width="302" height="104"/></clipPath><clipPath id="mx-clip-1006-143-302-152-0"><rect x="1006" y="143" width="302" height="152"/></clipPath><clipPath id="mx-clip-1474-798-302-64-0"><rect x="1474" y="798" width="302" height="64"/></clipPath><clipPath id="mx-clip-1474-870-302-232-0"><rect x="1474" y="870" width="302" height="232"/></clipPath><clipPath id="mx-clip-1868-35-372-34-0"><rect x="1868" y="35" width="372" height="34"/></clipPath><clipPath id="mx-clip-1868-77-372-152-0"><rect x="1868" y="77" width="372" height="152"/></clipPath><clipPath id="mx-clip-1802-405-324-64-0"><rect x="1802" y="405" width="324" height="64"/></clipPath><clipPath id="mx-clip-1802-477-324-192-0"><rect x="1802" y="477" width="324" height="192"/></clipPath><clipPath id="mx-clip-2162-394-322-64-0"><rect x="2162" y="394" width="322" height="64"/></clipPath><clipPath id="mx-clip-2162-466-322-182-0"><rect x="2162" y="466" width="322" height="182"/></clipPath><clipPath id="mx-clip-1807-706-402-44-0"><rect x="1807" y="706" width="402" height="44"/></clipPath><clipPath id="mx-clip-1807-758-402-82-0"><rect x="1807" y="758" width="402" height="82"/></clipPath><clipPath id="mx-clip-479-562-302-64-0"><rect x="479" y="562" width="302" height="64"/></clipPath><clipPath id="mx-clip-479-634-302-92-0"><rect x="479" y="634" width="302" height="92"/></clipPath><clipPath id="mx-clip-1434-90-342-124-0"><rect x="1434" y="90" width="342" height="124"/></clipPath><clipPath id="mx-clip-1434-222-342-222-0"><rect x="1434" y="222" width="342" height="222"/></clipPath><clipPath id="mx-clip-4-64-332-64-0"><rect x="4" y="64" width="332" height="64"/></clipPath><clipPath id="mx-clip-4-136-332-142-0"><rect x="4" y="136" width="332" height="142"/></clipPath><clipPath id="mx-clip-571-31-322-64-0"><rect x="571" y="31" width="322" height="64"/></clipPath><clipPath id="mx-clip-571-103-322-142-0"><rect x="571" y="103" width="322" height="142"/></clipPath><clipPath id="mx-clip-484-417-312-24-0"><rect x="484" y="417" width="312" height="24"/></clipPath><clipPath id="mx-clip-484-449-312-62-0"><rect x="484" y="449" width="312" height="62"/></clipPath><clipPath id="mx-clip-824-421-312-34-0"><rect x="824" y="421" width="312" height="34"/></clipPath><clipPath id="mx-clip-824-463-312-82-0"><rect x="824" y="463" width="312" height="82"/></clipPath><clipPath id="mx-clip-2834-53-522-104-0"><rect x="2834" y="53" width="522" height="104"/></clipPath><clipPath id="mx-clip-2834-165-522-322-0"><rect x="2834" y="165" width="522" height="322"/></clipPath><clipPath id="mx-clip-4-336-332-24-0"><rect x="4" y="336" width="332" height="24"/></clipPath><clipPath id="mx-clip-4-368-332-82-0"><rect x="4" y="368" width="332" height="82"/></clipPath><clipPath id="mx-clip-2554-556-442-54-0"><rect x="2554" y="556" width="442" height="54"/></clipPath><clipPath id="mx-clip-2554-618-442-132-0"><rect x="2554" y="618" width="442" height="132"/></clipPath><clipPath id="mx-clip-3034-556-442-44-0"><rect x="3034" y="556" width="442" height="44"/></clipPath><clipPath id="mx-clip-3034-608-442-132-0"><rect x="3034" y="608" width="442" height="132"/></clipPath><clipPath id="mx-clip-1434-485-284-84-0"><rect x="1434" y="485" width="284" height="84"/></clipPath><clipPath id="mx-clip-1434-577-284-142-0"><rect x="1434" y="577" width="284" height="142"/></clipPath></defs><g transform="translate(0.5,0.5)"><rect x="439.5" y="852" width="380" height="220" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 439.5 878 L 439.5 852 L 819.5 852 L 819.5 878 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="628.29" y="869.5">SensorFusionApplication</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-444-883-372-74-0)" font-size="12px"><text x="445" y="895.5">- m_unscented_kalman_filter_ : UnscentedKalmanFilter</text><text x="445" y="909.5">- m_estimations_: std::vector&lt;State&gt;</text><text x="445" y="923.5">- m_ground_truth_: std::vector&lt;GroundTruth&gt;</text><text x="445" y="937.5">- m_current_RMSE_: Eigen::VectorXd</text><text x="445" y="951.5">- m_NIS_: std::vector&lt;double&gt;</text></g><path d="M 439.5 956 L 819.5 956" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-444-965-372-112-0)" font-size="12px"><text x="445" y="977.5">+ SensorFusionApplication()</text><text x="445" y="991.5">+ ~SensorFusionApplication()</text><text x="445" y="1005.5">+ Run(Measurement* currentMeasurement, </text><text x="445" y="1019.5">        GroundTruth* currentGroundtruth) : State*</text><text x="445" y="1033.5">- CalculateRMSE(): Eigen::VectorXd</text><text x="445" y="1047.5">- GetCurrentNIS() const: double</text></g><rect x="980" y="846" width="440" height="560" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 980 872 L 980 846 L 1420 846 L 1420 872 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1198.79" y="863.5">UnscentedKalmanFilter</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-984-877-432-244-0)" font-size="12px"><text x="985.5" y="889.5">- m_kalman_filter_: KalmanFilter</text><text x="985.5" y="903.5">- m_is_initialized: bool</text><text x="985.5" y="917.5">- m_previous_timestamp_ : long long</text><text x="985.5" y="945.5">- m_sigma_points_predicted_  : Eigen::MartixXd</text><text x="985.5" y="959.5">- m_weights_  : Eigen::VectorXd</text><text x="985.5" y="987.5">- m_std_a_  : double</text><text x="985.5" y="1001.5">- m_std_yawdd_  : double</text><text x="985.5" y="1015.5">- m_num_process_noise_variables_: int</text><text x="985.5" y="1029.5">- m_state_dimensions_: int</text><text x="985.5" y="1043.5">- m_aug_state_dimensions_: int</text><text x="985.5" y="1057.5">- m_sigma_points_ : int </text><text x="985.5" y="1071.5">- m_aug_sigma_points_ :int </text><text x="985.5" y="1085.5">- m_measurement_dimensions_ : int </text><text x="985.5" y="1099.5">- m_lambda: double</text><text x="985.5" y="1113.5">- m_current_NIS : double</text></g><path d="M 980 1120 L 1420 1120" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-984-1129-432-282-0)" font-size="12px"><text x="985.5" y="1141.5">+ UnscentedKalmanFilter()</text><text x="985.5" y="1155.5">+ ~UnscentedKalmanFilter()</text><text x="985.5" y="1169.5">+ ProcessMeasurement(std::unique_ptr&lt;Measurement&gt; pMeasurement)</text><text x="985.5" y="1183.5">+ GetPredictedState() const: State</text><text x="985.5" y="1197.5">+ GetCurrentNIS() const : double</text><text x="985.5" y="1211.5">- ComputeDeltaT(long long pTimestamp): float</text><text x="985.5" y="1225.5">- GenerateAugmentedSigmaPoints(const Eigen::VectorXd&amp; x, </text><text x="985.5" y="1239.5">                                                         const Eigen::MatrixXd&amp; P) : Eigen::MatrixXd</text><text x="985.5" y="1253.5">- PredictSigmaPoints(Eigen::MatrixXd&amp;, const double) : void </text><text x="985.5" y="1281.5">- Predict() : void </text><text x="985.5" y="1295.5">- PredictMeasurement(Measurement* ): void </text><text x="985.5" y="1309.5">- Update(Measurement * ) : void </text><text x="985.5" y="1337.5">- FillSigmaPointMatrix(Eigen::VectorXd&amp; x, Eigen::MatrixXd&amp; P, </text><text x="985.5" y="1351.5">                                    Eigen::MatrixXd&amp; Xsig) : void   </text><text x="985.5" y="1365.5">- ComputeSigmaPointPredictionPerColumn(Eigen::VectorXd&amp; xSigAugCol, </text><text x="985.5" y="1379.5">                                    const double deltaT): Eigen::VectorXd </text><text x="985.5" y="1393.5">- CalculateSigmaPointsWeights(): void </text></g><rect x="1002" y="0" width="310" height="290" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1002 26 L 1002 0 L 1312 0 L 1312 26 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1155.79" y="17.5">DataUtils::DataAdapter</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1006-31-302-104-0)" font-size="12px"><text x="1007.5" y="43.5">- m_data_ : std::string</text><text x="1007.5" y="57.5">- m_data_stream_ : std::istringstream</text><text x="1007.5" y="71.5">- m_measurement_ : std::unique_ptr&lt;Measurement&gt;</text><text x="1007.5" y="85.5">- m_groundtruth_ : std::unique_ptr&lt;State&gt;</text><text x="1007.5" y="99.5">- m_data_type_:SensorDataTypes</text></g><path d="M 1002 134 L 1312 134" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1006-143-302-152-0)" font-size="12px"><text x="1007.5" y="155.5">+ DataAdapter(const nlohmann::son&amp; pJSONData)</text><text x="1007.5" y="169.5">+ ~DataAdapter()</text><text x="1007.5" y="183.5">+ SetData(const std::string&amp; ) : void </text><text x="1007.5" y="197.5">+ ParseData() : void </text><text x="1007.5" y="211.5">+ GetMeasurement() : Measurement*</text><text x="1007.5" y="225.5">+ GetGroundTruth() : const GroundTruth*</text><text x="1007.5" y="239.5">- ParseMeasurementData() : void </text><text x="1007.5" y="253.5">- ParseGroundTruthData(): void</text><text x="1007.5" y="267.5">- ProcessLaserData() : bool</text><text x="1007.5" y="281.5">- ProcessRadarData(): bool</text></g><rect x="1469.5" y="767" width="310" height="330" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1469.5 793 L 1469.5 767 L 1779.5 767 L 1779.5 793 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1623.29" y="784.5">KalmanFilter</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1474-798-302-64-0)" font-size="12px"><text x="1475" y="810.5">- x_  : Eigen::VectorXd</text><text x="1475" y="824.5">- P_  : Eigen::MatrixXd</text><text x="1475" y="838.5">- Q_  : Eigen::MatrixXd</text><text x="1475" y="852.5">- F_  : Eigen::MatrixXd</text></g><path d="M 1469.5 861 L 1779.5 861" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1474-870-302-232-0)" font-size="12px"><text x="1475" y="882.5">+ KalmanFilter()</text><text x="1475" y="896.5">+ ~KalmanFilter()</text><text x="1475" y="910.5">+ Init(Eigen::MatrixXd&amp; P_)</text><text x="1475" y="938.5">+ SetState(const State&amp; pState)</text><text x="1475" y="952.5">+ GetState() const : const Eigen::VectorXd&amp;</text><text x="1475" y="966.5">+ GetStateCovariance() const : const Eigen::MatrixXd&amp; </text><text x="1475" y="980.5">+ GetStateResiduals() const: const Eigen::MatrixXd&amp; </text><text x="1475" y="1008.5">+ Predict()</text><text x="1475" y="1022.5">+ Update(const Eigen::MatrixXd&amp; z, </text><text x="1475" y="1036.5">              const Eigen::MatrixXd &amp;Hx, </text><text x="1475" y="1050.5">              const Eigen::MatrixXd&amp; zCovariance, </text><text x="1475" y="1064.5">              const Eigen::MatrixXd&amp; xzCovariance, </text><text x="1475" y="1078.5">              bool doNormalizeAngle, </text><text x="1475" y="1092.5">              int angleIndex)</text></g><rect x="1864" y="4" width="380" height="220" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1864 30 L 1864 4 L 2244 4 L 2244 30 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2052.79" y="21.5">Data::Measurement</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1868-35-372-34-0)" font-size="12px"><text x="1869.5" y="47.5">- m_timestamp_ : long long</text><text x="1869.5" y="61.5">- m_state_adapter_strategy_ : std::unique_ptr&lt;StateAdapterStrategy&gt;</text></g><path d="M 1864 68 L 2244 68" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1868-77-372-152-0)" font-size="12px"><text x="1869.5" y="89.5"># Measurement(std::unique_ptr&lt;StateAdapterStrategy&gt; pStrategy, </text><text x="1869.5" y="103.5">                         long long pTimestamp)</text><text x="1869.5" y="117.5">+ virtual ~Measurement()</text><text x="1869.5" y="131.5">+ GetTimestamp() const : long long</text><text x="1869.5" y="145.5">+ GetStateAdapterStrategy() : StateAdapterStrategy*</text><text x="1869.5" y="159.5">+ virtual GetStateData() const = 0 : State</text><text x="1869.5" y="173.5">+ virtual GetVectorizedData() const  = 0: const Eigen::VectorXd</text><text x="1869.5" y="187.5">+ virtual GetMeasurementType() const = 0: const std::string </text><text x="1869.5" y="201.5">+ virtual GetInitStateCovariance() const = 0: Eigen::MartrixXd</text><text x="1869.5" y="215.5"># virtual Print(std::ostream&amp; ) const = 0 : void </text></g><rect x="1798" y="374" width="332" height="290" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1798 400 L 1798 374 L 2130 374 L 2130 400 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1962.79" y="391.5">Data::RadarMeasurement</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1802-405-324-64-0)" font-size="12px"><text x="1803.5" y="417.5">- m_rho_ : float</text><text x="1803.5" y="431.5">- m_theta_ : float</text><text x="1803.5" y="445.5">- m_rho_dot_ : float</text><text x="1803.5" y="459.5">- m_input_dimensions_ : std::size_t</text></g><path d="M 1798 468 L 2130 468" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1802-477-324-192-0)" font-size="12px"><text x="1803.5" y="489.5">+ RadarMeasurement(</text><text x="1803.5" y="503.5">    std::unique_ptr&lt;StateAdapterStrategy&gt; pS,</text><text x="1803.5" y="517.5">    long long pTimestamp, </text><text x="1803.5" y="531.5">    float pRho, </text><text x="1803.5" y="545.5">    float pTheta,</text><text x="1803.5" y="559.5">   float pRhoDot)</text><text x="1803.5" y="573.5">+ ~RadarMeasurement()</text><text x="1803.5" y="587.5">+ GetStateData() const : State</text><text x="1803.5" y="601.5">+ GetVectorizedData() const : const Eigen::VectorXd</text><text x="1803.5" y="615.5">+ GetInputDimensions() const override : std::size_t</text><text x="1803.5" y="629.5">+ Print(std::stream&amp;): const override : void </text><text x="1803.5" y="643.5">+ GetMeasurementType() const override: const std::string</text><text x="1803.5" y="657.5">+ GetInitStateCovariance() const override : Eigen::MatrixXd </text></g><rect x="2157.5" y="363" width="330" height="280" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 2157.5 389 L 2157.5 363 L 2487.5 363 L 2487.5 389 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2321.29" y="380.5">Data::LaserMeasurement</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2162-394-322-64-0)" font-size="12px"><text x="2163" y="406.5">- m_posiiton_x_ : float</text><text x="2163" y="420.5">- m_position_y_ : float </text><text x="2163" y="434.5">- m_input_dimensions_ : std:size_t</text></g><path d="M 2157.5 457 L 2487.5 457" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2162-466-322-182-0)" font-size="12px"><text x="2163" y="478.5">+ LaserMeasurement(</text><text x="2163" y="492.5">     std::unique_ptr&lt;StateAdapterStrategy&gt; pS, </text><text x="2163" y="506.5">     long long pTimestamp,</text><text x="2163" y="520.5">     float pPositionX, </text><text x="2163" y="534.5">     float pPositionY)</text><text x="2163" y="548.5">+ ~LaserMeasurement()</text><text x="2163" y="562.5">+ GetStateData() const : State</text><text x="2163" y="576.5">+ GetVectorizedData() const : const Eigen::VectorXd</text><text x="2163" y="590.5">+ GetInputDimensions() const override : std::size_t</text><text x="2163" y="604.5">+ Print(std::stream&amp;): const override : void </text><text x="2163" y="618.5">+ GetMeasurementType() const override: const std::string</text><text x="2163" y="632.5">+ GetInitStateCovariance() const override : Eigen::MatrixXd</text></g><rect x="1803.5" y="675" width="410" height="160" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1803.5 701 L 1803.5 675 L 2213.5 675 L 2213.5 701 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2007.29" y="692.5">Data::StateAdapterStrategyFactory</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1807-706-402-44-0)" font-size="12px"><text x="1809" y="718.5">- mSensorType_ : std::string</text><text x="1809" y="732.5">- mLaserStrategy_ : StateAdapterStrategy*</text><text x="1809" y="746.5">- mRadarStrategy_ : StateAdapterStrategy* </text></g><path d="M 1803.5 749 L 2213.5 749" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1807-758-402-82-0)" font-size="12px"><text x="1809" y="770.5">+ StateAdapterStrategy() </text><text x="1809" y="784.5">+ ~StateAdapterStrategy()</text><text x="1809" y="798.5">+ setSensorType(const std::string&amp; pSensorType) </text><text x="1809" y="812.5">+ getStateAdapterStrategy(const std::size_t pMeasurementDimensions):</text><text x="1809" y="826.5">     StateAdapterStrategy*</text></g><rect x="474.5" y="531" width="310" height="190" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 474.5 557 L 474.5 531 L 784.5 531 L 784.5 557 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="628.29" y="548.5">DataUtils::Utils</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-479-562-302-64-0)" font-size="12px"><text x="480" y="574.5">- m_start_delim_ : std::string</text><text x="480" y="588.5">- m_end_delim_ : std::string </text><text x="480" y="602.5">- m_EOF_delim_ : std::string</text><text x="480" y="616.5">- m_default_string_: std::string</text></g><path d="M 474.5 625 L 784.5 625" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-479-634-302-92-0)" font-size="12px"><text x="480" y="646.5">+ Utils( const std::string&amp; pStart,</text><text x="480" y="660.5">            const std::string&amp; pEnd,</text><text x="480" y="674.5">            const std::string&amp; pEOF)</text><text x="480" y="688.5">+ ~Utils()</text><text x="480" y="702.5">+ HasData() const : bool </text><text x="480" y="716.5">+ GetData() : const std::string </text></g><rect x="1429.5" y="59" width="350" height="380" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1429.5 85 L 1429.5 59 L 1779.5 59 L 1779.5 85 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1603.29" y="76.5">Data::State</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1434-90-342-124-0)" font-size="12px"><text x="1435" y="102.5">- m_position_x_ : float</text><text x="1435" y="116.5">- m_position_y_ : float</text><text x="1435" y="130.5">- m_velocity_ : float</text><text x="1435" y="144.5">- m_psi_ : float</text><text x="1435" y="158.5">- m_psi_dot_ : float</text><text x="1435" y="172.5">- mNumMembers_ : float</text><text x="1435" y="186.5">- m_is_x_modified : bool </text><text x="1435" y="200.5">- m_is_y_modified: bool </text></g><path d="M 1429.5 213 L 1779.5 213" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1434-222-342-222-0)" font-size="12px"><text x="1435" y="234.5">+ State(float px, float py, float v, float psi, float psi_dot)</text><text x="1435" y="248.5">+ ~State()</text><text x="1435" y="262.5">+ GetPositionX() const : const float</text><text x="1435" y="276.5">+ GetPositionY() const : const float</text><text x="1435" y="290.5">+ GetVelocity() const : const float</text><text x="1435" y="304.5">+ GetPsi() const : const float</text><text x="1435" y="318.5">+ GetPsiDot() const : const float</text><text x="1435" y="332.5">+ Diff (const State&amp; other) : Eigen::VectorXd</text><text x="1435" y="346.5">+ static GetInputDimensions() : std::size_t</text><text x="1435" y="360.5">+ GetVectorizedData() const : Eigen::VectorXd</text><text x="1435" y="374.5">+ GetCartesianCoordinates() const : GroundTruth</text><text x="1435" y="388.5">+ CheckIfXModified() : bool </text><text x="1435" y="402.5">+ CheckIfYModified() : bool </text><text x="1435" y="416.5">- CeilPosXValue() : void </text><text x="1435" y="430.5">- CeilPosYValue(): void </text></g><rect x="0" y="33" width="340" height="240" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 0 59 L 0 33 L 340 33 L 340 59 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="168.79" y="50.5">DataUtils::InputParser</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-64-332-64-0)" font-size="12px"><text x="5.5" y="76.5">-m_source_:std::string</text><text x="5.5" y="90.5">-m_output_:std::string</text><text x="5.5" y="104.5">-m_data_type_:std::string</text><text x="5.5" y="118.5">-m_is_parse_successful_:bool</text></g><path d="M 0 127 L 340 127" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-136-332-142-0)" font-size="12px"><text x="5.5" y="148.5">+InputParser(const std::string&amp; defaultSource, </text><text x="5.5" y="162.5">                     const std::string&amp; defaultOutput)</text><text x="5.5" y="176.5">+~InputParser()</text><text x="5.5" y="190.5">+ParseArgs(int args, char**argv): void</text><text x="5.5" y="204.5">+GetOutput() const : const std::string&amp; </text><text x="5.5" y="218.5">+GetSource() const : const std::string&amp; </text><text x="5.5" y="232.5">+GetDataType() const : const std::string&amp; </text><text x="5.5" y="246.5">+IsParseSuccessful() const :bool</text><text x="5.5" y="260.5">-ShowUsage(const std::string&amp; progrramName)</text></g><rect x="567" y="0" width="330" height="240" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 567 26 L 567 0 L 897 0 L 897 26 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="730.79" y="17.5">DataUtils::DataReader</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-571-31-322-64-0)" font-size="12px"><text x="572.5" y="43.5">-m_output_file_name_:std::string</text><text x="572.5" y="57.5">-m_output_data_stream_:std::of stream</text><text x="572.5" y="71.5">-m_data_adapter_:std::unique_ptr&lt;DataAdapter&gt;</text><text x="572.5" y="85.5">-m_application_:std::unique_ptr&lt;SensorFusionApplication&gt;</text></g><path d="M 567 94 L 897 94" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-571-103-322-142-0)" font-size="12px"><text x="572.5" y="115.5">+ DataResder(std::unique_ptr&lt;DataAdapter&gt;,</text><text x="572.5" y="129.5">                std::unique_ptr&lt;SensorFusionApplication&gt;)</text><text x="572.5" y="143.5">+ ~DataReader()</text><text x="572.5" y="157.5">+ SetOutputFile(const std::string&amp; pFileName)</text><text x="572.5" y="171.5">+ GetAdapter():DataAdapter*</text><text x="572.5" y="185.5">+ GetApplication():SensorFusionApplication*</text><text x="572.5" y="199.5">+ virtual Run() </text><text x="572.5" y="213.5">+ ProcessData(const std::string&amp; pData): const State*</text><text x="572.5" y="227.5">+ WriteResultsToFile(const State* pState)</text></g><path d="M 915.99 92 L 999.76 92" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 900.99 92 L 908.49 87.59 L 915.99 92 L 908.49 96.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 987.88 98.5 L 1000.88 92 L 987.88 85.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(901.5,74.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><rect x="479.5" y="386" width="320" height="120" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 479.5 412 L 479.5 386 L 799.5 386 L 799.5 412 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="638.29" y="403.5">DataUtils::WebClientReader</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-484-417-312-24-0)" font-size="12px"><text x="485" y="429.5">-mServerHub_ :uWS::Hub</text></g><path d="M 479.5 440 L 799.5 440" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 479.5 453 L 439.5 453 Q 429.5 453 429.5 463 L 429.5 665 Q 429.5 675 439.5 674.87 L 472.05 674.46" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 460.25 681.11 L 473.17 674.44 L 460.09 668.11" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(419.5,555.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="20" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Use</div></div></foreignObject><text x="10" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Use</text></switch></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-484-449-312-62-0)" font-size="12px"><text x="485" y="461.5">+ WebClientReader(std::unique_ptr&lt;DataAdapter&gt;,</text><text x="485" y="475.5">                std::unique_ptr&lt;SensorFusionApplication&gt;)</text><text x="485" y="489.5">+ ~WebClientReader()</text><text x="485" y="503.5">+ virtual Run()</text></g><rect x="819.5" y="390" width="320" height="150" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 819.5 416 L 819.5 390 L 1139.5 390 L 1139.5 416 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="978.29" y="407.5">DataUtils::FileReader</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-824-421-312-34-0)" font-size="12px"><text x="825" y="433.5">-m_file_name_:std::string</text><text x="825" y="447.5">-m_file_reader_:std::if stream</text></g><path d="M 819.5 454 L 1139.5 454" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-824-463-312-82-0)" font-size="12px"><text x="825" y="475.5">+ FileReader(std::unique_ptr&lt;DataAdapter&gt;,</text><text x="825" y="489.5">                std::unique_ptr&lt;SensorFusionApplication&gt;)</text><text x="825" y="503.5">+ ~FileReader()</text><text x="825" y="517.5">+ SetSource(const std::string&amp; pFileName) </text><text x="825" y="531.5">+ virtual Run()</text></g><path d="M 570 167.01 L 570 167.86 Q 570 168.71 560 168.71 L 410 168.71 Q 400 168.71 400 178.71 L 400 793 Q 400 803 410 803 L 620 803 Q 630 803 630 813 L 630 849.76" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 570 182.01 L 565.59 174.51 L 570 167.01 L 574.41 174.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 623.5 837.88 L 630 850.88 L 636.5 837.88" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(568.5,168.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 640 385.86 L 730.94 257.77" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 740.78 243.91 L 737.87 262.69 L 724.01 252.85 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(669.5,308.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><path d="M 980 390.14 L 790.08 244.05" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 776.6 233.68 L 795.26 237.31 L 784.89 250.78 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(857.5,305.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><rect x="2830" y="22" width="530" height="460" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 2830 48 L 2830 22 L 3360 22 L 3360 48 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="3093.79" y="39.5">Data::StateAdapterStrategy</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2834-53-522-104-0)" font-size="12px"><text x="2835.5" y="65.5">- m_measurement_dimensions_ : std::size_t</text><text x="2835.5" y="79.5">- mH_ : Eigen::MatrixXd </text><text x="2835.5" y="93.5">- mR_ : Eigen::MatrixXd </text><text x="2835.5" y="107.5">- mZ_ : Eigen::MatrixXd</text><text x="2835.5" y="121.5">- mS_ : Eigen::MatrixXd</text><text x="2835.5" y="135.5">- mZResiduals_ : Eigen::MatrixXd </text><text x="2835.5" y="149.5">- mT_ : Eigen::MatrixXd</text></g><path d="M 2830 156 L 3360 156" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2834-165-522-322-0)" font-size="12px"><text x="2835.5" y="177.5">+ StateAdapterStrategy(const std::size_t pMeasurementDims)</text><text x="2835.5" y="191.5">+ virtual ~StateAdapterStrategy()</text><text x="2835.5" y="205.5">+ GetDimensions() const : const size_t </text><text x="2835.5" y="219.5">+ GetPredictedMeasurementMean() : const Eigen::MatrixXd&amp; </text><text x="2835.5" y="233.5">+ GetPredictedMeasurementCovariance() : const Eigen::MatrixXd &amp; </text><text x="2835.5" y="247.5">+ GetPredictedCrossCorrelation() : const Eigen::MatrixXd&amp; </text><text x="2835.5" y="261.5">+ GetZResiduals() : const Eigen::MatrixXd </text><text x="2835.5" y="275.5">+ virtual CalculateNIS( const Eigen::VectorXd pMeasurement): double </text><text x="2835.5" y="289.5">+ virtual ComputeEstimatedState(const Eigen::MatrixXd&amp; predictedSigmaPoints, </text><text x="2835.5" y="303.5">                                                     const Eigen::VectorXd&amp; pSigmaPointsWeights): void</text><text x="2835.5" y="317.5">+ virtual ComputePredictedCrossCorrelation(const Eigen::MatrixXd&amp; pPredictedXSP, </text><text x="2835.5" y="331.5">                                                   const Eigen::VectorXd&amp; pSigmaPointWeights, </text><text x="2835.5" y="345.5">                                                   const Eigen::VectorXd&amp; pX) = 0 : void   </text><text x="2835.5" y="359.5">+ GetMeasurementCovariance(): const Eigen::MatrixXd </text><text x="2835.5" y="373.5">+ virtual CheckNormalizeAngle() const = 0 : bool </text><text x="2835.5" y="387.5">+ virtual GetNormalizeAngleIndex() const = 0 : bool </text><text x="2835.5" y="401.5"># virtual TransformXSigmalPointsToZSpace( const Eigen::MatrixXd&amp; ) const = 0 : Eigen::MatrixXd </text><text x="2835.5" y="415.5"># Normalize(Eigen::VectorXd&amp; pMeasurement, int index) : void </text><text x="2835.5" y="429.5"># ComputePredictedMeasurementMean(Eigen::MatrixXd&amp; pSigmaPoints,</text><text x="2835.5" y="443.5">                                                   const Eigen::VectorXd&amp; pSigmaPointWeights) : void </text><text x="2835.5" y="457.5"># ComputePredictedMeasurementCovariance(Eigen::MatrixXd&amp; pZSigmaPoints,</text><text x="2835.5" y="471.5">        const Eigen::VectorXd&amp; pSigmaPointWeights) : void </text></g><path d="M 2814 521 L 3023.52 488.62" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3040.32 486.03 L 3024.82 497.02 L 3022.23 480.22 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(2907.5,497.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><path d="M 3196 521 L 3119.98 494.65" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3103.91 489.08 L 3122.76 486.62 L 3117.19 502.68 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(3128.5,498.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><path d="M 1200 294.43 L 1199.51 743 Q 1199.5 753 1209.5 753.02 L 1800.62 754.42" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1788.72 760.9 L 1801.74 754.43 L 1788.75 747.9" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1261.5,747.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="20" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Use</div></div></foreignObject><text x="10" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Use</text></switch></g><path d="M 2228.84 723 L 2510 723 Q 2520 723 2520 713 L 2520 648.71 Q 2520 638.71 2530 638.71 L 2547.76 638.71" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2213.84 723 L 2221.34 718.59 L 2228.84 723 L 2221.34 727.41 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2535.88 645.21 L 2548.88 638.71 L 2535.88 632.21" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(2214.5,705.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 2228.84 794.43 L 2221.56 794.43 Q 2214.29 794.43 2224.29 794.43 L 3245.71 794.43 Q 3255.71 794.43 3255.71 784.43 L 3255.71 737.24" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2213.84 794.43 L 2221.34 790.02 L 2228.84 794.43 L 2221.34 798.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 3262.21 749.12 L 3255.71 736.12 L 3249.21 749.12" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(2214.5,776.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 1964.29 374.43 L 2020.2 239.73" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2026.71 224.03 L 2028.05 242.99 L 2012.35 236.47 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1975.5,293.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><path d="M 2322.86 363 L 2050.74 237.72" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2035.3 230.61 L 2054.3 230 L 2047.19 245.44 Z" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(2158.5,290.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="40" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Extends</div></div></foreignObject><text x="20" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Extends</text></switch></g><path d="M 2255.99 74.02 L 2525.71 74.41 Q 2535.71 74.43 2535.71 84.43 L 2535.71 92.29 Q 2535.71 100.14 2545.71 100.14 L 2827.76 100.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2240.99 74 L 2248.49 69.6 L 2255.99 74.02 L 2248.48 78.42 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2815.88 106.64 L 2828.88 100.14 L 2815.88 93.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(2241.5,56.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 1327.99 47.29 L 1450 47.29 Q 1460 47.29 1470 47.29 L 1862.05 47.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1312.99 47.29 L 1320.49 42.87 L 1327.99 47.29 L 1320.49 51.7 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1850.17 53.79 L 1863.17 47.29 L 1850.17 40.79" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1313.5,29.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 1327.99 214.43 L 1361.43 214.43 Q 1371.43 214.43 1371.43 224.43 L 1371.43 238.71 Q 1371.43 248.71 1381.43 248.76 L 1427.26 248.99" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1312.99 214.43 L 1320.49 210.02 L 1327.99 214.43 L 1320.49 218.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1415.35 255.43 L 1428.38 248.99 L 1415.41 242.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1313.5,196.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 1865.71 130.14 L 1829 118.11 Q 1819.5 115 1819.5 125 L 1819.5 279 Q 1819.5 289 1812.45 296.09 L 1781.58 327.13" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 1785.35 314.12 L 1780.79 327.92 L 1794.56 323.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1808.5,200.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="20" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Use</div></div></foreignObject><text x="10" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Use</text></switch></g><path d="M 837.41 974.43 L 920 974.43 Q 930 974.43 930 971.57 L 930 970.14 Q 930 968.71 940 968.71 L 980.62 968.71" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 822.41 974.43 L 829.91 970.02 L 837.41 974.43 L 829.91 978.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 968.74 975.21 L 981.74 968.71 L 968.74 962.21" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(822.5,956.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 835.99 914.43 L 900 914.43 Q 910 914.43 910 904.43 L 910 793 Q 910 783 920 783 L 1360 783 Q 1370 783 1370 773 L 1370 298.71 Q 1370 288.71 1380 288.71 L 1427.76 288.71" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 820.99 914.43 L 828.49 910.02 L 835.99 914.43 L 828.49 918.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1415.88 295.21 L 1428.88 288.71 L 1415.88 282.21" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(821.5,896.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">n</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">n</text></switch></g><path d="M 1440.27 1134.43 L 1442.28 1134.43 Q 1444.29 1134.43 1444.29 1124.43 L 1444.29 834.43 Q 1444.29 824.43 1454.29 824.43 L 1467.76 824.43" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1425.27 1134.43 L 1432.77 1130.02 L 1440.27 1134.43 L 1432.77 1138.84 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1455.88 830.93 L 1468.88 824.43 L 1455.88 817.93" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1425.5,1116.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><rect x="0" y="305" width="340" height="140" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 0 331 L 0 305 L 340 305 L 340 331 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="168.79" y="322.5">DataUtils::DataReaderFactory</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-336-332-24-0)" font-size="12px"><text x="5.5" y="348.5">-m_data_source_: std::string</text></g><path d="M 0 359 L 340 359" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-4-368-332-82-0)" font-size="12px"><text x="5.5" y="380.5">+DataReaderFactory()</text><text x="5.5" y="394.5">+~DataReaderFactory()</text><text x="5.5" y="408.5">+ SetSource(const std::string&amp; pString)</text><text x="5.5" y="422.5">+ GetDataReader(std::unique_ptr&lt;DataAdapter&gt;, </text><text x="5.5" y="436.5">             std::unique_ptr&lt;SensorFusionApplication&gt;)</text></g><rect x="2550" y="525" width="450" height="220" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 2550 551 L 2550 525 L 3000 525 L 3000 551 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="2773.79" y="542.5">Data::RadarStateAdapterStrategy</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2554-556-442-54-0)" font-size="12px"><text x="2555.5" y="568.5">- m_std_rho_ : double</text><text x="2555.5" y="582.5">- m_std_theta_ : double </text><text x="2555.5" y="596.5">- m_std_rhodot_ : double </text></g><path d="M 2550 609 L 3000 609" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-2554-618-442-132-0)" font-size="12px"><text x="2555.5" y="630.5">+ RadarStateAdapterStrategy(const std::size_t pDims)</text><text x="2555.5" y="644.5">+ virtual ~RadarStateAdapterStrategy()</text><text x="2555.5" y="658.5">+ virtual CheckNormalizeAngle()  const : bool </text><text x="2555.5" y="672.5">+ virtual GetNormalizeAngleIndex() const : int </text><text x="2555.5" y="686.5">+ ComputePredictedCrossCorrelation( const Eigen::MatrixXd&amp; pPredictedXSP,</text><text x="2555.5" y="700.5">                                                   const Eigen::VectorXd&amp; pSigmaPointWeights,</text><text x="2555.5" y="714.5">                                                   const Eigen::VectorXd&amp; pX) : void </text><text x="2555.5" y="728.5">+ CalculateNIS(const Eigen::VectorXd&amp; pMeasurement) : double</text><text x="2555.5" y="742.5">- TransformXSigmaPointsToZSpace(const Eigen::MatrixXd&amp;) : Eigen::MatrixXd</text></g><rect x="3030" y="525" width="450" height="210" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 3030 551 L 3030 525 L 3480 525 L 3480 551 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="3253.79" y="542.5">Data::LaserStateAdapterStrategy</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-3034-556-442-44-0)" font-size="12px"><text x="3035.5" y="568.5">- m_std_px_ : double</text><text x="3035.5" y="582.5">- m_std_py_ : double  </text></g><path d="M 3030 599 L 3480 599" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-3034-608-442-132-0)" font-size="12px"><text x="3035.5" y="620.5">+ RadarStateAdapterStrategy(const std::size_t pDims)</text><text x="3035.5" y="634.5">+ virtual ~RadarStateAdapterStrategy()</text><text x="3035.5" y="648.5">+ virtual CheckNormalizeAngle()  const : bool </text><text x="3035.5" y="662.5">+ virtual GetNormalizeAngleIndex() const : int </text><text x="3035.5" y="676.5">+ ComputePredictedCrossCorrelation( const Eigen::MatrixXd&amp; pPredictedXSP,</text><text x="3035.5" y="690.5">                                                   const Eigen::VectorXd&amp; pSigmaPointWeights,</text><text x="3035.5" y="704.5">                                                   const Eigen::VectorXd&amp; pX) : void </text><text x="3035.5" y="718.5">+ CalculateNIS(const Eigen::VectorXd&amp; pMeasurement) : double</text><text x="3035.5" y="732.5">- TransformXSigmaPointsToZSpace(const Eigen::MatrixXd&amp;) : Eigen::MatrixXd</text></g><rect x="1429.5" y="454.14" width="292" height="260" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 1429.5 480.14 L 1429.5 454.14 L 1721.5 454.14 L 1721.5 480.14 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="12px"><text x="1574.29" y="471.64">Data::GroundTruth</text></g><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1434-485-284-84-0)" font-size="12px"><text x="1435" y="497.64">- m_position_x_ : float</text><text x="1435" y="511.64">- m_position_y_ : float</text><text x="1435" y="525.64">- m_velocity_x_ : float</text><text x="1435" y="539.64">- m_velocity_y_ : float</text><text x="1435" y="553.64">- mNumMembers_ : float</text></g><path d="M 1429.5 568.14 L 1721.5 568.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g fill="#000000" font-family="Helvetica" clip-path="url(#mx-clip-1434-577-284-142-0)" font-size="12px"><text x="1435" y="589.64">+ GroundTruth(float px, float py, float vx, float vy)</text><text x="1435" y="603.64">+ ~GroundTruth() </text><text x="1435" y="617.64">+ GetPositionX() const : const float </text><text x="1435" y="631.64">+ GetPositionY() const : const float</text><text x="1435" y="645.64">+ GetVelocityX() const : const float</text><text x="1435" y="659.64">+ GetVelocityY() const : const float</text><text x="1435" y="673.64">+ Diff(const GroundTruth&amp; ) const : Eigen::VectorXd</text><text x="1435" y="687.64">+ static GetInputDimensions() : size_t</text><text x="1435" y="701.64">+ GetVectorizedData() const : Eigen::VectorXd </text></g><path d="M 1331.7 280.14 L 1335.85 280.14 Q 1340 280.14 1340 290.14 L 1340 560.14 Q 1340 570.14 1350 570.14 L 1427.76 570.14" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1316.7 280.14 L 1324.2 275.73 L 1331.7 280.14 L 1324.2 284.55 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 1415.88 576.64 L 1428.88 570.14 L 1415.88 563.64" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(1317.5,262.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="6" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">1</div></div></foreignObject><text x="3" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">1</text></switch></g><path d="M 340 404.43 L 477.79 424.11" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 465.1 428.87 L 478.89 424.27 L 466.94 416" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(398.5,408.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="20" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Use</div></div></foreignObject><text x="10" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Use</text></switch></g><path d="M 341.43 360.14 L 420.16 345.79 Q 430 344 440 344 L 760 344 Q 770 344 779.42 347.34 L 897.89 389.39" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="none"/><path d="M 884.52 391.55 L 898.95 389.77 L 888.87 379.29" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(613.5,338.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="20" height="11" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; white-space: nowrap; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;background-color:#ffffff;">Use</div></div></foreignObject><text x="10" y="11" fill="#000000" text-anchor="middle" font-size="11px" font-family="Helvetica">Use</text></switch></g></g></svg>